BUILDING MAINTAINABLE SOFTWARE: TEN GUIDELINES FOR FUTURE PROOF CODE - JOOST VISSER
************************************************************************************

00.PREFACE:
***********
    First, Low maintainability means that developers spend too much time on maintaining and fixing old code.
    SIG measures system maintainability based on eight metrics - refer Appendix A 
    
    Second, lack of maintainability is to a large extent caused by simple issues that occur over and over again. 
    
    SIG/TÜViT1 Evaluation Criteria for Trusted Product Maintainability, a set of metrics to systematically rate source code maintainability
    
    For instance, Checkstyle (Java), StyleCop+ (for C#), Pylint (for Python),JSHint (for JavaScript), RuboCop (for Ruby), and PMD (covers multiple languages,including C# and Java) all check compliance with the guideline presented in Chapter 2
    
    Checkstyle has over 150 rules, but their effect of maintainability is not equal. 
        We have selected the 10 most important guidelines from experience
        We teach how to comply with these 10 guidelines

        https://www.sig.eu/en/about-sig/publications/sigtuvit-evaluation-criteria-trusted-product-maintainability/
        
    We present statistics and examples from real-world systems

    SIG Metrics try to avoid below 
        Metrics that are technology dependent - depth of inheritance for instance is applicable only to OOPS
        Metrics that are strongly correlated to other metrics - eg. total number of decision points in a system is strongly correlated to code volume 
        Metrics that do not differentiate in practice - theoritically sound better but in practice yield almost same value across projects - no point including these
        
    While we introduce and explain a number of refactoring patterns
    
    Generic Names for Elements of Source Code
    Table P-1. A generic grouping of concepts and their representation in Java.
        Generic name        Generic definition                                                          In Java
        Unit                Smallest grouping of lines that can be executed independently               Method or constructor
        Module              Smallest grouping of units Top-level                                        class, interface, or enum
        Component           Top-level division of a system as defined by its software architecture      Not defined by the language
        System              The entire codebase under study                                             Not definned by the language

        * From smallest to largest - groupings are ordered from smallest to largest
            Lines Of Code:  any line in source code that ends with an Enter/Return, and neither is empty nor contains only a comment.
            A statement in JAVA can be spread across multiple lines 
        * Some concepts are not defined in a particular language
            eg. JAVA  no syntax to describe the boundaries of a system, but there are other ways to acheve this
        * Some well-known generic concepts play no role
            Table does not define well-known terms such as subcomponent and subsystem - simple reason - not needed for guidelines
        * Not all grouping constructs of a language are represented
            A Java package is not the same as a component in the generic terminology. 
            In very small Java systems, there may be a one-to-one mapping between components and packages. 
            In larger Java systems, there are usually far more packages than components.
        * Build tooling plays no role in the generic terminology
            Apache Ant team has grouping concepts call targets
            Maven team has several POMs
        * Components are determined by the architecture of the system
            
    Code examples can be downloaded from : https://github.com/oreillymedia/building_maintainable_software
    Attribute For example: “Building Maintainable Software: Ten Guidelines for Future-Proof Code by Joost Visser. Copyright 2016 Software Improve‐ment Group B.V., 978-1-4919-5352-5.”


01-INTRODUCTION
***************

The ease or difficulty with which a software system can be modified is known as its maintainability. 

The international standard ISO/IEC 25010:2011 (which we simply call ISO 25010 in this book1) breaks down software quality into eight characteristics: 
    maintainability, functional suitability, performance efficiency, compatibility, usability, reliability, security and portability
    
Four Types of Software Maintainance
    Corrective Maintainance: Bugs are discovered and have to be fixed 
    Adaptive Maintainance: The system has to be adapted to changes in the environment in which it operates—for example, upgrades of the operating system or technologies 
    Perfective Maintenance: Users have new / changed requirement
    Preventive Maintainance: Identify to increase quality or prevent future bugs from occuring
    
    • Maintainability, or lack thereof, has significant business impact.
    • Maintainability is an enabler for other quality characteristics.

    